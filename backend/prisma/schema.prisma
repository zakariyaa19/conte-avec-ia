// Schema Prisma pour l'application Contes d'IA
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String?
  lastName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  orders    Order[]
  
  @@map("users")
}

model Order {
  id        String      @id @default(cuid())
  userId    String?
  status    OrderStatus @default(NEW_ORDER)
  
  // Étape 1 - Données du conte
  ageRange           String
  generalTheme       String
  customTheme        String?
  specificSubject    String
  customSubject      String?
  centralMessage     String
  customMessage      String?
  illustrationStyle  String
  
  // Étape 2 - Données du protagoniste
  protagonistName    String
  protagonistAge     String?
  protagonistGender  String?
  eyeColor          String?
  hairColor         String?
  photoUrl          String?
  
  // Langue du conte
  language          String?
  
  // Informations supplémentaires (facultatif)
  hobbies           String?
  favoriteDish      String?
  specialEvents     String?
  
  // Option religieuse (facultatif)
  religion          String?
  customReligion    String?
  
  // Personnage secondaire (optionnel)
  secondaryCharacterName String?
  secondaryCharacterAge  String?
  
  // Détails personnels
  creatorName       String?
  
  // Informations produit
  productType       ProductType
  price            Decimal
  
  // Adresse de livraison (optionnelle pour eBook)
  shippingFirstName String?
  shippingLastName  String?
  shippingAddress   String?
  shippingCity      String?
  shippingPostalCode String?
  
  // Paiement
  stripePaymentIntentId String?
  paidAt               DateTime?
  
  // Fichiers générés
  ebookUrl            String?
  generatedAt         DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User? @relation(fields: [userId], references: [id])
  
  @@map("orders")
}

model AdminUser {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      AdminRole @default(ADMIN)
  isActive  Boolean   @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("admin_users")
}

enum OrderStatus {
  NEW_ORDER
  IN_PROGRESS
  DELIVERED
  BLOCKED
  PENDING
  PAID
  PROCESSING
  GENERATED
  PRINTED
  SHIPPED
  CANCELLED
  REFUNDED
}

enum ProductType {
  EBOOK
  PRINTED
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  EDITOR
}
