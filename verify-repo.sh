#!/bin/bash

# üîç Script de V√©rification du Repository Conte-IA
# Ce script v√©rifie que le repository est propre et pr√™t pour le d√©ploiement

echo "üîç V√âRIFICATION DU REPOSITORY CONTE-IA"
echo "======================================"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Compteur d'erreurs
ERRORS=0

echo ""
echo "1Ô∏è‚É£  V√©rification des repositories Git imbriqu√©s..."
NESTED_REPOS=$(find . -name ".git" -type d | grep -v "^./.git$")
if [ -z "$NESTED_REPOS" ]; then
    echo -e "${GREEN}‚úÖ Aucun repository Git imbriqu√© trouv√©${NC}"
else
    echo -e "${RED}‚ùå Repositories Git imbriqu√©s d√©tect√©s:${NC}"
    echo "$NESTED_REPOS"
    ERRORS=$((ERRORS + 1))
fi

echo ""
echo "2Ô∏è‚É£  V√©rification des fichiers sensibles..."
SENSITIVE_FILES=$(git ls-files | grep -E "\.(env|key|secret|token)$")
if [ -z "$SENSITIVE_FILES" ]; then
    echo -e "${GREEN}‚úÖ Aucun fichier sensible track√©${NC}"
else
    echo -e "${RED}‚ùå Fichiers sensibles d√©tect√©s:${NC}"
    echo "$SENSITIVE_FILES"
    ERRORS=$((ERRORS + 1))
fi

echo ""
echo "3Ô∏è‚É£  V√©rification des node_modules..."
NODE_MODULES=$(git ls-files | grep node_modules)
if [ -z "$NODE_MODULES" ]; then
    echo -e "${GREEN}‚úÖ Aucun node_modules track√©${NC}"
else
    echo -e "${RED}‚ùå node_modules d√©tect√©s:${NC}"
    echo "$NODE_MODULES" | head -5
    echo "... (et plus)"
    ERRORS=$((ERRORS + 1))
fi

echo ""
echo "4Ô∏è‚É£  V√©rification des fichiers build..."
BUILD_FILES=$(git ls-files | grep -E "(dist/|build/)")
if [ -z "$BUILD_FILES" ]; then
    echo -e "${GREEN}‚úÖ Aucun fichier build track√©${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Fichiers build d√©tect√©s (peuvent √™tre ignor√©s):${NC}"
    echo "$BUILD_FILES" | wc -l | xargs echo "Nombre de fichiers:"
fi

echo ""
echo "5Ô∏è‚É£  V√©rification des fichiers syst√®me..."
SYSTEM_FILES=$(git ls-files | grep -E "\.(DS_Store|Thumbs\.db)$")
if [ -z "$SYSTEM_FILES" ]; then
    echo -e "${GREEN}‚úÖ Aucun fichier syst√®me track√©${NC}"
else
    echo -e "${RED}‚ùå Fichiers syst√®me d√©tect√©s:${NC}"
    echo "$SYSTEM_FILES"
    ERRORS=$((ERRORS + 1))
fi

echo ""
echo "6Ô∏è‚É£  V√©rification de la structure principale..."
FRONTEND_FILES=$(git ls-files | grep "contes-ia/" | wc -l)
BACKEND_FILES=$(git ls-files | grep "backend/" | wc -l)
echo -e "${GREEN}üìÅ Frontend: $FRONTEND_FILES fichiers${NC}"
echo -e "${GREEN}üìÅ Backend: $BACKEND_FILES fichiers${NC}"

if [ $FRONTEND_FILES -lt 50 ]; then
    echo -e "${RED}‚ùå Trop peu de fichiers frontend d√©tect√©s${NC}"
    ERRORS=$((ERRORS + 1))
fi

if [ $BACKEND_FILES -lt 20 ]; then
    echo -e "${RED}‚ùå Trop peu de fichiers backend d√©tect√©s${NC}"
    ERRORS=$((ERRORS + 1))
fi

echo ""
echo "7Ô∏è‚É£  V√©rification du statut Git..."
if git diff --quiet && git diff --cached --quiet; then
    echo -e "${GREEN}‚úÖ Working directory propre${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Modifications non commit√©es d√©tect√©es${NC}"
    git status --porcelain
fi

echo ""
echo "8Ô∏è‚É£  V√©rification de la connexion remote..."
REMOTE_URL=$(git remote get-url origin 2>/dev/null)
if [ -n "$REMOTE_URL" ]; then
    echo -e "${GREEN}‚úÖ Remote configur√©: $REMOTE_URL${NC}"
else
    echo -e "${RED}‚ùå Aucun remote configur√©${NC}"
    ERRORS=$((ERRORS + 1))
fi

echo ""
echo "======================================"
if [ $ERRORS -eq 0 ]; then
    echo -e "${GREEN}üéâ REPOSITORY PR√äT POUR LE D√âPLOIEMENT!${NC}"
    echo -e "${GREEN}‚úÖ Toutes les v√©rifications sont pass√©es${NC}"
else
    echo -e "${RED}‚ùå $ERRORS erreur(s) d√©tect√©e(s)${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Corrigez les erreurs avant de d√©ployer${NC}"
fi
echo "======================================"
